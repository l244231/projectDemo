<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
                        ">

	<!-- 读取配置文件 -->
	<bean id="propertyConfigurerQ" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:quartz-config.properties"></property>
	</bean>

	<!--定义scheduler -->
	<bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" destroy-method="destroy">
		<property name="triggers">
			<list>
				<ref bean="helloJobTrigger" />
			</list>
		</property>
		<property name="group">
			<value>${org.quartz.group.name}</value>
		</property>
		<property name="configLocation">
			<value>classpath:quartz-config.properties</value>
		</property>
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<!-- 如果这个覆盖配置为false，quratz启动以后将以数据库的数据为准，配置文件的修改不起作用 -->
		<property name="overwriteExistingJobs">
			<value>true</value>
		</property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<!-- 通过applicationContextSchedulerContextKey属性配置spring上下文 -->
		<property name="applicationContextSchedulerContextKey">
			<value>context</value>
		</property>
		<property name="autoStartup" value="${quartz.autoStartup}">
		</property>
		<property name="startupDelay" value="${quartz.startupDelay}">
		</property>
	</bean>

	<!--定义job的事务管理器 -->
	<!--dsFactory 在biz-context.xml里定义 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>


	<!-- 上传通知 start -->
	<bean id="helloJobBean" class="org.project.quartz.test.HelloJob" />
	<bean id="helloJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass">
			<value>org.springframework.scheduling.quartz.QuartzJobBean</value>
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="beanID">
					<value>helloJobBean</value>
				</entry>
				<entry key="methodName">
					<value>execute</value>
				</entry>
			</map>
		</property>
		<property name="requestsRecovery">
			<value>true</value>
		</property>
		<property name="group">
			<value>${org.quartz.group.name}</value>
		</property>
	</bean>

	<bean id="helloJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" lazy-init="true">
		<property name="cronExpression">
			<value>${helloJob.time}</value>
		</property>
		<property name="jobDetail">
			<ref  bean="helloJob" />
		</property>
		<property name="group">
			<value>${org.quartz.group.name}</value>
		</property>
	</bean>
	<!-- 上传通知 end -->

</beans>