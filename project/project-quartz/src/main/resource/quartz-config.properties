################################################
#
# 存放context文件中在不同环境（开发，测试，生产）
# 下需要修改的变量
#
################################################

#下面是quartz的配置

#Quartz Group Name
org.quartz.group.name=group1

quartz.autoStartup=true

#延迟启动时间：生产环境
#quartz.startupDelay=30
#延迟启动时间：测试环境
quartz.startupDelay=2

#quartz scheduler实例名
org.quartz.scheduler.instanceName = DefaultQuartzScheduler
#定义每个scheduler节点的ID，使用AUTO保证在集群环境中保证ID的唯一性
org.quartz.scheduler.instanceId = AUTO

#定义job可工作的线程
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 10

#定义jobStor保存job信息
org.quartz.jobStore.misfireThreshold = 60000

#定义数据表名的前缀
org.quartz.jobStore.tablePrefix = QRTZ_
#如果使用PostgreSQL数据库 则去掉下面注释
#org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.PostgreSQLDelegate

#定义使用集群
org.quartz.jobStore.isClustered = true
org.quartz.jobStore.clusterCheckinInterval = 2000
#定义日志记录
org.quartz.plugin.jobHistory.class = org.quartz.plugins.history.LoggingJobHistoryPlugin
org.quartz.plugin.jobHistory.jobToBeFiredMessage = Job {0} is about to be fired at: {2, date, HH:mm:ss MM/dd/yyyy}
org.quartz.plugin.jobHistory.jobSuccessMessage  = Job {0} completed at: {2, date, HH:mm:ss MM/dd/yyyy}


#任务触发点：生产环境
#dataUploadJob.time=* 10/20 7-16 * * ?
#dataNoticeJob.time=* 20/20 7-16 * * ?
#dataDealResultJob.time=* 30/20 7-16 * * ?
#bizDataUpdateJob.time=* 30/40 7-16 * * ?
#transferBizToHisJob.time=* 30/50 7-16 * * ?
#dataDifferenceJob.time=* 35/20 7-16 * * ?
#dataSummaryCheckJob.time=* 10/20 0-6 * * ?
#dataSummaryResultJob.time=* 40/20 0-6 * * ?
#dataCacheManagerJob.time=* 0/25 8-23 * * ?
#flowExceptionManagerJob.time=* 0/30 * * * ?
#dataConversionJob.time=* 0/20 * * * ?
#任务触发点：测试环境
helloJob.time=0/1 * * * * ?


##      CronTrigger配置格式:
##      格式: [秒] [分] [小时] [日] [月] [周] [年]

##      序号   	说明   	是否必填		允许填写的值			允许的通配符
##      1 		秒		是			0-59 				, - * /
##      2		分		是			0-59				, - * /
##      3		小时		是			0-23  				, - * /
##      4		日		是			1-31				, - * ? / L W
##      5		月		是			1-12 or JAN-DEC		, - * /
##      6		周		是			1-7 or SUN-SAT		, - * ? / L #
##      7		年		否			empty 或 1970-2099	, - * /

##      通配符说明:
##		* ：表示所有值. 例如:在分的字段上设置 "*",表示每一分钟都会触发。
##		? ：表示不指定值。使用的场景为不需要关心当前设置这个字段的值。例如:要在每月的10号触发一个操作，但不关心是周几，所以需要周位置的那个字段设置为"?" 具体设置为 0 0 0 10 * ?
##		- ：表示区间。例如 在小时上设置 "10-12",表示 10,11,12点都会触发。
##		, ：表示指定多个值，例如在周字段上设置 "MON,WED,FRI" 表示周一，周三和周五触发
##		/ ：用于递增触发。如在秒上面设置"5/15" 表示从5秒开始，每增15秒触发(5,20,35,50)。 在月字段上设置'1/3'所示每月1号开始，每隔三天触发一次。
##		L ：表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年[leap]), 在周字段上表示星期六，相当于"7"或"SAT"。如果在"L"前加上数字，则表示该数据的最后一个。
##			例如在周字段上设置"6L"这样的格式,则表示“本月最后一个星期五"
##		W ：表示离指定日期的最近那个工作日(周一至周五). 例如在日字段上设置"15W"，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发.如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 "1W",它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，"W"前只能设置具体的数字,不允许区间"-").
##			'L'和 'W'可以一组合使用。如果在日字段上设置"LW",则表示在本月的最后一个工作日触发
##		# ：序号(表示每月的第几周星期几)，例如在周字段上设置"6#3"表示在每月的第三个周星期六.注意如果指定"6#5",正好第五周没有星期六，则不会触发该配置(用在母亲节和父亲节再合适不过了)
##      周字段的设置，若使用英文字母是不区分大小写的 MON 与mon相同.
